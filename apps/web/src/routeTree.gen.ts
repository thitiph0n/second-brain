/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CouponsRouteImport } from './routes/coupons'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSuccessRouteImport } from './routes/auth.success'
import { Route as AuthErrorRouteImport } from './routes/auth.error'
import { Route as AuthCallbackRouteImport } from './routes/auth.callback'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CouponsRoute = CouponsRouteImport.update({
  id: '/coupons',
  path: '/coupons',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSuccessRoute = AuthSuccessRouteImport.update({
  id: '/auth/success',
  path: '/auth/success',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthErrorRoute = AuthErrorRouteImport.update({
  id: '/auth/error',
  path: '/auth/error',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coupons': typeof CouponsRoute
  '/dashboard': typeof DashboardRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/success': typeof AuthSuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coupons': typeof CouponsRoute
  '/dashboard': typeof DashboardRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/success': typeof AuthSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/coupons': typeof CouponsRoute
  '/dashboard': typeof DashboardRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/success': typeof AuthSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/coupons'
    | '/dashboard'
    | '/auth/callback'
    | '/auth/error'
    | '/auth/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/coupons'
    | '/dashboard'
    | '/auth/callback'
    | '/auth/error'
    | '/auth/success'
  id:
    | '__root__'
    | '/'
    | '/coupons'
    | '/dashboard'
    | '/auth/callback'
    | '/auth/error'
    | '/auth/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CouponsRoute: typeof CouponsRoute
  DashboardRoute: typeof DashboardRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthErrorRoute: typeof AuthErrorRoute
  AuthSuccessRoute: typeof AuthSuccessRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/coupons': {
      id: '/coupons'
      path: '/coupons'
      fullPath: '/coupons'
      preLoaderRoute: typeof CouponsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/success': {
      id: '/auth/success'
      path: '/auth/success'
      fullPath: '/auth/success'
      preLoaderRoute: typeof AuthSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/error': {
      id: '/auth/error'
      path: '/auth/error'
      fullPath: '/auth/error'
      preLoaderRoute: typeof AuthErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CouponsRoute: CouponsRoute,
  DashboardRoute: DashboardRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthErrorRoute: AuthErrorRoute,
  AuthSuccessRoute: AuthSuccessRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
